wbcd
wbcd <- read.csv("/home/askofen/Documents/LearningR/Data/wisc_bc_data.csv", stringsAsFactors = FALSE)
wbcd$diagnosis <- factor(wbcd$diagnosis, levels = c("B", "M"), labels = c("Benign", "Malignant"))
wbcd = wbcd[2:32]
#wbcd_n <- as.data.frame(lapply(wbcd[2:31], normalize))
wbcd_n <- as.data.frame(lapply(wbcd[2:31], normalize))
wbcd_train <- wbcd_n[1:469, ]
wbcd_test <- wbcd_n[470:569, ]
clear
clear()
}
library('gmodels')
library('class')
normalize <- function(x){
return ((x - min(x)) / (max(x) - min(x)))
}
wbcd <- read.csv("/home/askofen/Documents/LearningR/Data/wisc_bc_data.csv", stringsAsFactors = FALSE)
wbcd$diagnosis <- factor(wbcd$diagnosis, levels = c("B", "M"), labels = c("Benign", "Malignant"))
wbcd[1,]
wbcd = wbcd[2:32]
wbcd[1]
wbcd[1,]
wbcd[,1]
wbcd[1,]
wbcd_n <- as.data.frame(lapply(wbcd[2:31], normalize))
wbcd_train <- wbcd_n[1:469, ]
wbcd_test <- wbcd_n[470:569, ]
wbcd_train_label <- wbcd[1:469, 1]
wbcd_test_label <- wbcd[470:569, 1]
wbcd_train_label
wbcd_test_label
wbcd_test_pred <- knn(train = wbcd_train, test = wbcd_test, cl = wbcd_train_label, k=21)
wbcd_test_pred
wbcd <- read.csv("/home/askofen/Documents/LearningR/Data/wisc_bc_data.csv", stringsAsFactors = FALSE)
wbcd$diagnosis <- factor(wbcd$diagnosis, levels = c("B", "M"), labels = c("Benign", "Malignant"))
wbcd = wbcd[2:32]
#wbcd_n <- as.data.frame(lapply(wbcd[2:31], normalize))
wbcd_n <- as.data.frame(lapply(wbcd[2:31], normalize))
wbcd_train <- wbcd_n[1:469, ]
wbcd_test <- wbcd_n[470:569, ]
wbcd_train_label <- wbcd[1:469, 1]
wbcd_test_label <- wbcd[470:569, 1]
wbcd_test_pred <- knn(train = wbcd_train, test = wbcd_test, cl = wbcd_train_label, k=21)
#CrossTable(x = wbcd_test_label, y = wbcd_test_pred, prop.chisq=FALSE)
rm(list = ls())
library('gmodels')
library('class')
normalize <- function(x){
return ((x - min(x)) / (max(x) - min(x)))
}
wbcd <- read.csv("/home/askofen/Documents/LearningR/Data/wisc_bc_data.csv", stringsAsFactors = FALSE)
wbcd$diagnosis <- factor(wbcd$diagnosis, levels = c("B", "M"), labels = c("Benign", "Malignant"))
wbcd = wbcd[2:32]
#wbcd_n <- as.data.frame(lapply(wbcd[2:31], normalize))
wbcd_n <- as.data.frame(lapply(wbcd[2:31], normalize))
wbcd_train <- wbcd_n[1:469, ]
wbcd_test <- wbcd_n[470:569, ]
wbcd_train_label <- wbcd[1:469, 1]
wbcd_test_label <- wbcd[470:569, 1]
wbcd_test_pred <- knn(train = wbcd_train, test = wbcd_test, cl = wbcd_train_label, k=21)
#CrossTable(x = wbcd_test_label, y = wbcd_test_pred, prop.chisq=FALSE)
source('~/Documents/LearningR/KNearestNeighbors.R')
source('~/Documents/LearningR/KNearestNeighbors.R')
source('~/Documents/LearningR/KNearestNeighbors.R')
source('~/Documents/LearningR/KNearestNeighbors.R')
table(wbcd_test_label)
CrossTable(x = wbcd_test_label, y = wbcd_test_pred, prop.chisq=TRUE)
CrossTable(x = wbcd_test_label, y = wbcd_test_pred, chisq=TRUE)
wbcd
wbcd[1]
wbcd[-1]
table(wbcd[-1])
table(wbcd[1,])
summary(wbcd[1,])
summary(wbcd[2,])
summary(wbcd[,1])
summary(wbcd[,2])
summary(scale(wbcd[,2])
summary(scale(wbcd[,2]))
(scale(wbcd[,2]))
(scale(wbcd[,2])[1])
(scale(wbcd[,2])[2])
max(scale(wbcd[,2]))
min(scale(wbcd[,2]))
as.data.frame(wbcd[,2])
summary(as.data.frame(wbcd[,2]))
table(as.data.frame(wbcd[,2]))
typeof(as.data.frame(wbcd[,2]))
typeof(wbcd[,2])
wbcd_z = as.data.frame(scale(wbcd[-1]))
wbcd_z[0]
summary(wbcd_z$area_mean)
summary(wbcd_z$texture_mean)
wbcd_train <- wbcd_z[1:469, ]
wbcd_test <- wbcd_z[470:569, ]
wbcd_test_pred <- knn(train = wbcd_train, test = wbcd_test, cl = wbcd_train_label, k=21)
CrossTable(x = wbcd_test_label, y = wbcd_test_pred, prop.chisq=FALSE)
source('~/Documents/LearningR/KNearestNeighbors.R')
summary(wbcd_test$radius_mean)
wbcd_train <- wbcd_z[1:469, ]
wbcd_test <- wbcd_z[470:569, ]
wbcd_test_pred <- knn(train = wbcd_train, test = wbcd_test, cl = wbcd_train_label, k=21)
CrossTable(x = wbcd_test_label, y = wbcd_test_pred, prop.chisq=FALSE)
summary(wbcd_test$radius_mean)
wbcd_z = as.data.frame(scale(wbcd[-1]))
wbcd_train <- wbcd_z[1:469, ]
wbcd_test <- wbcd_z[470:569, ]
summary(wbcd_train)
summary(wbcd_z)
source('~/Documents/LearningR/KNearestNeighbors.R')
sms_row <- read.csv('/home/askofen/Documents/LearningR/Data/sms_spam.csv', stringsAsFactors = FALSE)
sms_row[0]
sms_row[,0]
sms_row[-1]
table(sms_row)
summary(sms_row)
str(sms_row)
sms_row$type <- factor(sms_row$type)
str(sms_row$type)
sms_row$type[1]
sms_row$type[3]
install.packages("tm")
library(tm)
sms_row$text
VectorSource(sms_row)
a = VectorSource(sms_row)
str(a)
?VectorSource
sms_corpus <- Corpus(VectorSource(sms_raw$text))
sms_corpus <- Corpus(VectorSource(sms_row$text))
str(sms_corpus)
source('~/Documents/LearningR/NaiveBayes.R')
rm(list = ls())
library('gmodels')
library('class')
library(tm)
sms_row <- read.csv('/home/askofen/Documents/LearningR/Data/sms_spam.csv', stringsAsFactors = FALSE)
str(sms_row)
sms_row$type <- factor(sms_row$type)
str(sms_row$type)
table(sms_raw$type)
source('~/Documents/LearningR/NaiveBayes.R')
str(sms_row$type)
sms_row$type
table(sms_row$type)
VectorSource(sms_row$text)
type(VectorSource(sms_row$text))
typeof(VectorSource(sms_row$text))
typeof(sms_row$text)
str(sms_row$text)
summary(sms_row$text)
a = VectorSource(sms_row$text)
a[0]
a[1]
a[2]
a[3]
a[10]
a[100]
summary(a)
a[0]
source('~/Documents/LearningR/NaiveBayes.R')
docs <- c("This is a text.", "This another one.")
(vs <- VectorSource(docs))
inspect(VCorpus(vs))
inspect(VCorpus(vs))
?Corpus
source('~/Documents/LearningR/NaiveBayes.R')
source('~/Documents/LearningR/NaiveBayes.R')
inspect(sms_corpus[1:3])
sms_corpus[1]
sms_row$text[1]
sms_row$text[0]
sms_row$text[2]
sms_corpus$`1`
sms_corpus$`3`
sms_corpus$`10`
sms_corpus$10
inspect(sms_corpus[1])
str(sms_corpus[1])
str(sms_corpus[2])
str(sms_corpus[2]$content)
sms_corpus[2]$content
sms_corpus[2][1]
sms_corpus[2][2]
sms_corpus[2][5]
corpus_clean <- tm_map(sms_corpus, tolower)
corpus_clean <- tm_map(corpus_clean, removeNumbers)
corpus_clean[1]
str(corpus_clean[1])
inspect(corpus_clean[1])
typeof(corpus_clean[1])
corpus_clean <- tm_map(corpus_clean, removeWords, stopwords())
source('~/Documents/LearningR/NaiveBayes.R')
sms_dtm <- DocumentTermMatrix(corpus_clean)
source('~/Documents/LearningR/NaiveBayes.R')
sms_dtm <- DocumentTermMatrix(corpus_clean)
DocumentTermMatrix(x("a sd sdfds", "dsf ds s"))
DocumentTermMatrix(c("a sd sdfds", "dsf ds s"))
str(corpus_clean[1:3])
str(corpus_clean[1])
source('~/Documents/LearningR/NaiveBayes.R')
?findFreqTerms
sms_train_freq[0]
sms_train_freq$i
sms_train_freq$j
sms_train_freq$j
sms_train_freq$v
convert_counts <- function(x) {
x <- ifelse(x > 0, 1, 0)
x <- factor(x, levels = c(0, 1), labels = c(""No"", ""Yes""))
return(x)
}
convert_counts <- function(x) {
return(x)
}
convert_counts <- function(x) {
return(x)
}
convert_counts <- function(x) {
return(x)
}
convert_counts <- function(x) {
x <- ifelse(x > 0, 1, 0)
x <- factor(x, levels = c(0, 1), labels = c(""No"", ""Yes""))
return(x)
}
convert_counts <- function(x) {
x <- ifelse(x > 0, 1, 0)
return(x)
}
convert_counts <- function(x) {
ones <- ifelse(x > 0, 1, 0)
ones <- factor(ones, levels = c(0, 1), labels = c(""No"", ""Yes""))
return(ones)
}
convert_counts <- function(x) {
ones <- ifelse(x > 0, 1, 0)
return(ones)
}
convert_counts <- function(x) {
ones <- ifelse(x > 0, 1, 0)
factor(ones, levels = c(0, 1), labels = c(""No"", ""Yes""))
return(ones)
}
convert_counts <- function(x) {
ones <- ifelse(x > 0, 1, 0)
ones <- factor(ones, levels = c(0, 1), labels = c("No", "Yes"))
return(ones)
}
sms_train_freq[0,1]
sms_train_freq[0,6]
sms_train_freq[1,6]
sms_train1 <- apply(sms_train_freq, MARGIN = 2, convert_counts)
sms_test1 <- apply(sms_test_freq, MARGIN = 2, convert_counts)
sms_train1
sms_train1[0]
sms_train1[1]
sms_train1[2]
sms_train1[3]
sms_test1[1]
sms_test1[2]
length(sms_test1)
length(sms_train1)
length(sms_train_freq)
length(sms_train_freq$j)
length(sms_train_freq$v)
length(sms_train_freq$ncol)
length(sms_train_freq$nrow)
sms_train_freq$nrow[1]
sms_train_freq$nrow[2]
sms_train_freq$nrow[3]
sms_train_freq$nrow[4]
sms_train_freq$j[1]
sms_train_freq$j[2]
sms_train_freq$j[3]
sms_train_freq$j[]
sms_train_freq$j[4]
sms_train_freq$j[5]
sms_train_freq$v[1]
sms_train_freq$v[]
sms_train_freq$v[2]
sms_train_freq$v[3]
sms_train_freq$i
?DocumentTermMatrix
inspect(sms_train_freq)
inspect(sms_train_freq[1])
inspect(sms_train_freq$i[1])
inspect(sms_train_freq[1:10])
inspect(sms_train_freq[1:10, 1:10])
inspect(sms_train_freq[1:100, 1:100])
inspect(sms_train_freq[1:10, 1:100])
inspect(sms_train_freq[1:10, 1:30])
install.packages("e1071")
library(e1071)
sms_classifier <- naiveBayes(sms_train1, sms_train$type)
sms_train$type[0]
sms_train$type[1]
sms_train$type[2]
sms_train1[0]
sms_train1[1]
sms_train1[2]
table(sms_train1)
length(sms_train1)
length(sms_train$type)
sms_train1[1,1]
length(sms_train1[,1])
length(sms_train1[1,])
sms_test_pred <- predict(sms_classifier, sms_test)
sms_classifier$levels[1]
sms_classifier$levels[2]
sms_classifier$levels[]
sms_classifier$levels[3]
sms_classifier$call[1]
sms_classifier$call[2]
sms_classifier$call
sms_classifier$apriori
sms_test_pred[1]
sms_test_pred[2]
sms_test_pred[3]
sms_test_pred[4]
sms_test_pred[1,1]
sms_test_pred
sms_test_pred <- predict(sms_classifier, sms_test1)
CrossTable(x = sms_test_pred, y = sms_test$type, dnn = c('Predicted', 'Actual'), prop.chisq = FALSE, prop.t = FALSE)
CrossTable(x = sms_test_pred, y = sms_test$type, dnn = c('Predicted', 'Actual'), prop.chisq = FALSE, prop.t = TRUE)
CrossTable(x = sms_test_pred, y = sms_test$type, dnn = c('Predicted', 'Actual'), prop.chisq = TRUE, prop.t = TRUE)
source('~/Documents/LearningR/NaiveBayes.R')
sms_classifier <- naiveBayes(sms_train1, sms_train$type, laplace = 1)
library('gmodels')
library('class')
library(tm)
library(wordcloud)
library(e1071)
sms_classifier <- naiveBayes(sms_train1, sms_train$type, laplace = 1)
sms_test_pred <- predict(sms_classifier, sms_test1)
CrossTable(x = sms_test_pred, y = sms_test$type, dnn = c('Predicted', 'Actual'), prop.chisq = FALSE, prop.t = FALSE)
credit <- read.csv("/home/askofen/Documents/LearningR/Data/credit.csv")
length(credit)
length(credit$default)
credit$default[1000]
credit$default[1]
credit$default[0]
credit$default[11]
str(credit)
table(credit$checking_balance)
table(credit$savings_balance)
summary(credit$months_loan_duration)
summary(credit$amount)
table(credit$default)
set.seed(12345)
runif(10)
order(runif(1000))
order(runif(10))
order(runif(10))
order(runif(10))
set.seed(12345)
order(runif(10))
set.seed(12345)
order(runif(10))
source('~/Documents/LearningR/DecisionTrees.R')
source('~/Documents/LearningR/DecisionTrees.R')
order(c(0.5, 0.25, 0.75, 0.1))
head(credit$amount)
head(credit_rand$amount)
credit_train <- credit_rand[1:900, ]
credit_test <- credit_rand[901:1000, ]
prop.table(table(credit_train$default))
prop.table(table(credit_test$default))
install.packages("C50")
credit_model <- C5.0(credit_train[-17], credit_train$default)
source('~/Documents/LearningR/DecisionTrees.R')
source('~/Documents/LearningR/DecisionTrees.R')
str(credit_train)
credit_train[21]
head(credit_train[21])
head(credit_train[20])
head(credit_train[17])
credit_model <- C5.0(credit_train[-21], credit_train$default)
source('~/Documents/LearningR/DecisionTrees.R')
credit_model <- C5.0(credit_train[1], credit_train$default)
credit_model <- C5.0(credit_train[1], credit_train$default)
str(credit_train$default)
credit <- read.csv("/home/askofen/Documents/LearningR/Data/credit.csv", stringsAsFactors = TRUE)
credit$default <- factor(credit$default)
str(credit$default)
table(credit$default)
source('~/Documents/LearningR/DecisionTrees.R')
credit_model
summary(credit_model)
head(credit_model)
credit_pred <- predict(credit_model, credit_test)
summary(credit_pred)
CrossTable(credit_test$default, credit_pred,
prop.chisq = FALSE, prop.c = FALSE, prop.r = FALSE,
dnn = c('actual default', 'predicted default'))
source('~/Documents/LearningR/DecisionTrees.R')
library (ROCR);
iinstalled.packages("ROCR")
installed.packages("ROCR")
install.packages("ROCR")
library (ROCR);
library (ROCR)
pred1 <- prediction(credit_test$default, credit_pred);
?prediction
pred1 <- prediction(c(1, 2, 2,2,1), c(1,2,2,1,1));
pred1
pred1 <- prediction(credit_test$default, credit_test$default);
pred1 <- prediction(factor(c(1,2,3,1,2,1,3)), factor(c(1,2,3,1,2,1,3)));
pred1 <- prediction(as.numeric(as.character(credit_test$default)), as.numeric(as.character(credit_pred)));
RP.perf <- performance(pred1, "prec", "rec");
plot (RP.perf);
RP.perf
RP.perf <- performance(pred1, "prec");
RP.perf
RP.perf <- performance(pred1, "rec");
RP.perf
RP.perf <- performance(pred1, "f");
RP.perf
ROC.perf <- performance(pred1, "tpr", "fpr")
plot (ROC.perf)
credit_boost10 <- C5.0(credit_train[-21], credit_train$default, trials = 10)
credit_boost10
summary(credit_boost10)
str(credit_boost10)
credit_boost10
summary(credit_boost10)
credit_boost_pred10 <- predict(credit_boost10, credit_test)
CrossTable(credit_test$default, credit_boost_pred10,
prop.chisq = FALSE, prop.c = FALSE, prop.r = FALSE,
dnn = c('actual default', 'predicted default'))
error_cost = matrix(c(0,1,4,0), nrow = 2)
credit_cost <- C5.0(credit_train[-21], credit_train$default, costs = error_cost)
source('~/Documents/LearningR/DecisionTrees.R')
error_cost = matrix(c(0,1,4,0), nrow = 2)
credit_cost <- C5.0(credit_train[-21], credit_train$default, costs = error_cost)
credit_cost_pred <- predict(credit_cost, credit_test)
CrossTable(credit_test$default, credit_cost_pred,
prop.chisq = FALSE, prop.c = FALSE, prop.r = FALSE,
dnn = c('actual default', 'predicted default'))
source('~/Documents/DataScienceStudyRepo/LearningR/DecisionTrees.R')
source('~/Documents/DataScienceStudyRepo/LearningR/DecisionTrees.R')
source('~/Documents/DataScienceStudyRepo/LearningR/KNearestNeighbors.R')
source('~/Documents/DataScienceStudyRepo/LearningR/NaiveBayes.R')
source('~/Documents/DataScienceStudyRepo/LearningR/NaiveBayes.R')
source('~/Documents/DataScienceStudyRepo/LearningR/NaiveBayes.R')
source('~/Documents/DataScienceStudyRepo/LearningR/DecisionRules.R')
source('~/Documents/DataScienceStudyRepo/LearningR/DecisionRules.R')
head(mushrooms)
length(mashrooms)
length(mushrooms)
length(mushrooms[,1])
length(mushrooms[,2])
length(mushrooms[,])
length(mushrooms[,23])
length(mushrooms[,24])
length(mushrooms[,0])
mushrooms[,0]
str(mushrooms$type)
str(mushrooms$cap_shape)
table(mushrooms$cap_shape)
table(mushrooms$odor)
table(mushrooms$veil_type)
source('~/Documents/DataScienceStudyRepo/LearningR/DecisionRules.R')
length(mushrooms)
install.packages("RWeka")
mushroom_1R <- OneR(type ~ ., data = mushrooms)
source('~/Documents/DataScienceStudyRepo/LearningR/DecisionRules.R')
mushroom_1R
print(table(mushrooms$type))
summary(mushroom_1R)
source('~/Documents/DataScienceStudyRepo/LearningR/DecisionRules.R')
source('~/Documents/DataScienceStudyRepo/LearningR/DecisionRules.R')
source('~/Documents/DataScienceStudyRepo/LearningR/DecisionRules.R')
source('~/Documents/DataScienceStudyRepo/LearningR/Regression.R')
table(launch$o_ring_ct)
source('~/Documents/DataScienceStudyRepo/LearningR/Regression.R')
source('~/Documents/DataScienceStudyRepo/LearningR/Regression.R')
source('~/Documents/DataScienceStudyRepo/LearningR/Regression.R')
source('~/Documents/DataScienceStudyRepo/LearningR/Regression.R')
length(la)
length(launch$o_ring_ct)
launch$o_ring_ct
launch$distress_ct
max(launch$distress_ct)
argmax(launch$distress_ct)
which.max(launch$distress_ct)
launch$temperature[14]
source('~/Documents/DataScienceStudyRepo/LearningR/Regression.R')
source('~/Documents/DataScienceStudyRepo/LearningR/Regression.R')
source('~/Documents/DataScienceStudyRepo/LearningR/Regression.R')
simpleRegr(50)
simpleRegr(60)
simpleRegr(80)
simpleRegr(20)
simpleRegr(10)
source('~/Documents/DataScienceStudyRepo/LearningR/Regression.R')
source('~/Documents/DataScienceStudyRepo/LearningR/Regression.R')
source('~/Documents/DataScienceStudyRepo/LearningR/Regression.R')
source('~/Documents/DataScienceStudyRepo/LearningR/Regression.R')
x <- cbind(Intercept = 1, c(1,2,3,4))
x
cbind(Intercept1 = 1, c(1,2,3,4))
cbind(Intercept1111 = 1, c(1,2,3,4))
cbind(Intercept1111 = 1, c(1,2,3,4), Asd= 2)
reg(y = launch$distress_ct, x = launch[3])
source('~/Documents/DataScienceStudyRepo/LearningR/Regression.R')
source('~/Documents/DataScienceStudyRepo/LearningR/Regression.R')
source('~/Documents/DataScienceStudyRepo/LearningR/Regression.R')
source('~/Documents/DataScienceStudyRepo/LearningR/Regression.R')
source('~/Documents/DataScienceStudyRepo/LearningR/RegressionMedicalDatabase.R')
source('~/Documents/DataScienceStudyRepo/LearningR/RegressionMedicalDatabase.R')
source('~/Documents/DataScienceStudyRepo/LearningR/RegressionMedicalDatabase.R')
