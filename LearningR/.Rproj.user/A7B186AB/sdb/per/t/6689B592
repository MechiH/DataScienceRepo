{
    "contents" : "rm(list = ls())\n\nlibrary('gmodels')\nlibrary('class')\nlibrary(tm)\nlibrary(wordcloud)\nlibrary(e1071)\n\nsms_row <- read.csv('/home/askofen/Documents/LearningR/Data/sms_spam.csv', stringsAsFactors = FALSE)\nstr(sms_row)\n\nsms_row$type <- factor(sms_row$type)\nstr(sms_row$type)\ntable(sms_row$type)\nsms_corpus <- Corpus(VectorSource(sms_row$text))\n\nprint(sms_corpus)\ninspect(sms_corpus[1:3])\n\ncorpus_clean <- tm_map(sms_corpus, content_transformer(tolower))\ncorpus_clean <- tm_map(corpus_clean, content_transformer(removeNumbers))\ncorpus_clean <- tm_map(corpus_clean, content_transformer(removePunctuation))\ncorpus_clean <- tm_map(corpus_clean, content_transformer(removeWords), stopwords())\ncorpus_clean <- tm_map(corpus_clean, content_transformer(stripWhitespace))\n\ninspect(corpus_clean[1:3])\n\nsms_dtm <- DocumentTermMatrix(corpus_clean)\n\nsms_train <- sms_row[1:4169,]\nsms_test <- sms_row[4170:5559,]\n\nsms_dtm_train <- sms_dtm[1:4169, ]\nsms_dtm_test <- sms_dtm[4170:5559, ]\n\nsms_corpus_train <- corpus_clean[1:4169]\nsms_corpus_test <- corpus_clean[4170:5559]\n\nprop.table(table(sms_train$type))\nprop.table(table(sms_test$type))\n\nwordcloud(sms_corpus_train, min.freq = 50, random.order = FALSE)\n\nspam <- subset(sms_train, type == \"spam\")\nham <- subset(sms_train, type == \"ham\")\n\nwordcloud(spam$text, max.words = 40, scale = c(3, 0.5))\nwordcloud(ham$text, max.words = 40, scale = c(3, 0.5))\n\nsms_dict <- findFreqTerms(sms_dtm_train, 5)\nsms_train_freq <- DocumentTermMatrix(sms_corpus_train, list(dictionary = sms_dict))\nsms_test_freq <- DocumentTermMatrix(sms_corpus_test, list(dictionary = sms_dict))\n\nconvert_counts <- function(x) {\n  ones <- ifelse(x > 0, 1, 0)\n  ones <- factor(ones, levels = c(0, 1), labels = c(\"No\", \"Yes\"))\n  return(ones)\n}\n\nsms_train1 <- apply(sms_train_freq, MARGIN = 2, convert_counts)\nsms_test1 <- apply(sms_test_freq, MARGIN = 2, convert_counts)\n\nsms_classifier <- naiveBayes(sms_train1, sms_train$type)\nsms_test_pred <- predict(sms_classifier, sms_test1)\nCrossTable(x = sms_test_pred, y = sms_test$type, dnn = c('Predicted', 'Actual'), prop.chisq = FALSE, prop.t = FALSE)\n\n\nsms_classifier <- naiveBayes(sms_train1, sms_train$type, laplace = 1)\nsms_test_pred <- predict(sms_classifier, sms_test1)\nCrossTable(x = sms_test_pred, y = sms_test$type, dnn = c('Predicted', 'Actual'), prop.chisq = FALSE, prop.t = FALSE)\n",
    "created" : 1434889800664.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3805167308",
    "id" : "6689B592",
    "lastKnownWriteTime" : 1434879462,
    "path" : "~/Documents/LearningR/NaiveBayes.R",
    "project_path" : "NaiveBayes.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "type" : "r_source"
}